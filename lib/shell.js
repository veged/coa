// Generated by CoffeeScript 1.4.0
var PATH, Q, QFS, completePath;

Q = require('q');

QFS = require('q-fs');

PATH = require('path');

exports.unescape = function(w) {
  w = w.charAt(0) === '"' ? w.replace(/^"|([^\\])"$/g, '$1') : w.replace(/\\ /g, ' ');
  return w.replace(/\\("|'|\$|`|\\)/g, '$1');
};

exports.escape = function(w) {
  w = w.replace(/(["'$`\\])/g, '\\$1');
  if (w.match(/\s+/)) {
    return '"' + w + '"';
  } else {
    return w;
  }
};

/**
Get path completion callback function that can be used
with Opt.comp() and Arg.comp() methods.
@returns {Function}  Path completion function.
*/


exports.pathCompletion = function() {
  return function(opts) {
    var last, partial, parts;
    partial = opts.partialWord;
    parts = partial.split('/');
    last = parts.pop();
    return completePath(partial, parts.join('/'), last);
  };
};

/**
Complete path on filesystem.
@param {String} partial Partial path to complete.
@param {String} prefix  Prefix of path to complete.
@param {String} [last]  Last component of path to complete
@returns {Promise * String[]}  Completion result.
*/


completePath = exports.completePath = function(partial, prefix, last) {
  return Q.all(QFS.list(PATH.join(process.cwd(), prefix)).then(function(res) {
    if (last && last.match(/^\./)) {
      return ['.', '..'].concat(res);
    } else {
      return res;
    }
  }).invoke('filter', function(f) {
    return !last || f.indexOf(last) === 0;
  }).invoke('map', function(f) {
    if (prefix) {
      f = [prefix, f].join('/');
    }
    return QFS.stat(f).then(function(stat) {
      return f + (stat.isDirectory() ? '/' : '');
    });
  })).then(function(res) {
    var d;
    if (res.length === 1 && (d = res[0]) && d.match(/\/$/)) {
      return completePath(d, d).then(function(res) {
        return [d].concat(res);
      });
    } else {
      return res;
    }
  });
};
